## 40K resistance input
value = 822
r1 = 10000
r2 = (value*r1)/(1023 - value)
print(r2)

## r2 = 40895.522388

def read_calib(offset):
    decoder = get_decoder(check_ok(mb_client.read_holding_registers(
        address=offset, count=UO_COUNT*2, slave=dut_addr)))
    vals = [0] * 8
    for i in range(8):
        vals[i] = decoder.decode_32bit_float()
    return vals


[2549, 2539, 2529, 2527, 2532, 2529, 2530, 2541]
✗ Failed:
Expected result:
[5000 5000 5000 5000 5000 5000 5000 5000]
Result:
[9789.83691406 9826.37011719 9872.5390625  9882.73828125 9861.03808594
 9872.18359375 9870.76074219 9821.05664062]


 [0.5026492476463318, 0.5036045908927917, 0.5046886801719666, 0.504960298538208, 0.5044384002685547, 0.5047100782394409, 0.5046490430831909, 0.5034275054931641]
 [0.5025882124900818, 0.503635048866272, 0.504746675491333, 0.504972517490387, 0.5044170618057251, 0.5046977996826172, 0.5046306848526001, 0.5034428238868713]


 [1.00013418 1.00037123 1.00064888 0.9998776  1.00076327 0.99935599 0.99996718 1.00040814]
[3.84545259e-05 2.83410364e-05 1.75030000e-05 1.32761516e-05
 1.92244431e-05 1.85311786e-05 2.07345026e-05 3.03965497e-05]

 [0.74616671 0.74691749 0.74774152 0.74888909 0.74740577 0.74870294
 0.74812305 0.74677408]
 [0.4957509  0.49653283 0.49745455 0.49832448 0.49708217 0.49792773
 0.49759492 0.49642903]
 [0.24623637 0.24714902 0.24812904 0.24876694 0.24790904 0.24817482
 0.24800384 0.2470483 ]

 [1.00009334 1.00030994 1.0005182  0.99983692 1.00067341 0.99929464
 0.99984068 1.00036716]
✓ Passed
[3.90236164e-05 2.97953338e-05 1.96698838e-05 1.42116014e-05
 2.19936719e-05 2.08297824e-05 2.17206780e-05 3.06711700e-05]
✓ Passed

Checking UI calibration
[0.25016172 0.25020517 0.25022462 0.25014753 0.25027534 0.25008273
 0.25013639 0.25020614]
✓ Passed
[0.49969955 0.49966628 0.49967935 0.49966437 0.49961626 0.49965947
 0.4996877  0.49967844]
✓ Passed
[0.75013873 0.75012855 0.75009603 0.7501881  0.75010841 0.75025779
 0.75017591 0.75011542]

  pin_value *= calib_coeff_10k;
            pin_value += calib_offset_10k;
            pin_value /= 2.75;
            return ((10000 * pin_value) / (0.3636 - 0.5));

[0.98305085 0.9843342  0.98177083 0.98565841 0.98696219 0.98305085
 0.984375   0.984375  ]
[-2.01129944 -2.01044386 -1.68489583 -4.3285528  -5.65362886 -2.01129944
 -4.328125   -4.328125  ]

 [0.98565841 0.9882199  0.98563969 0.98696219 0.98565841 0.98435463
 0.98309493 0.98565841]
[-4.         -3.66273997 -3.33333333 -5.32464146 -4.3285528  -3.00521512
 -4.         -4.        ]

 [0.98435463 0.98563969 0.98177083 0.98563969 0.98565841 0.9869281
 0.98177083 0.984375  ]
[-2.67709691 -3.33333333 -1.68489583 -4.31897302 -4.65710561 -3.33333333
 -2.66666667 -4.328125  ]


 [0.99965984 1.00027728 1.00049758 0.99982476 1.00063241 0.99922562
 0.99981636 1.00017107]
✓ Passed
[0.00402791 0.00285132 0.00174216 0.00124618 0.00194582 0.00193542
 0.00197664 0.00311472]